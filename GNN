Certainly! Here's an example of how to convert SMILES strings into molecular graphs and use them with a Graph Neural Network (GNN) using PyTorch Geometric.

### Step 1: Data Preparation
First, let's install the necessary libraries and prepare the data.

```python
# Install RDKit and PyTorch Geometric if you haven't already
# conda install -c conda-forge rdkit
# pip install torch torch-geometric

import pandas as pd
from rdkit import Chem
from rdkit.Chem import rdmolops
import torch
from torch_geometric.data import Data

# Load your dataset
data = pd.read_csv('molecules.csv')  # Assume the file contains a column 'smiles'

# Clean the data
data = data.dropna(subset=['smiles'])
data['mol'] = data['smiles'].apply(Chem.MolFromSmiles)
data = data.dropna(subset=['mol'])
```

### Step 2: Convert SMILES to Molecular Graphs
Convert the SMILES strings into molecular graphs.

```python
def mol_to_graph_data(mol):
    # Get adjacency matrix
    adj = rdmolops.GetAdjacencyMatrix(mol)
    edge_index = torch.tensor(adj.nonzero(), dtype=torch.long)
    
    # Get node features (atomic numbers)
    x = torch.tensor([atom.GetAtomicNum() for atom in mol.GetAtoms()], dtype=torch.float).view(-1, 1)
    
    return Data(x=x, edge_index=edge_index)

# Convert to graph data
graph_data = data['mol'].apply(mol_to_graph_data)
```

### Step 3: Define the GNN Model
Define a simple GNN model using PyTorch Geometric.

```python
import torch.nn as nn
import torch.nn.functional as F
from torch_geometric.nn import GCNConv

class GNN(nn.Module):
    def __init__(self, num_node_features, hidden_channels):
        super(GNN, self).__init__()
        self.conv1 = GCNConv(num_node_features, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.fc = nn.Linear(hidden_channels, 1)  # Assuming binary classification

    def forward(self, data):
        x, edge_index = data.x, data.edge_index
        x = self.conv1(x, edge_index)
        x = F.relu(x)
        x = self.conv2(x, edge_index)
        x = F.relu(x)
        x = torch.mean(x, dim=0)  # Global pooling
        x = self.fc(x)
        return torch.sigmoid(x)

# Example usage
num_node_features = 1  # Atomic number
hidden_channels = 64
model = GNN(num_node_features, hidden_channels)
```

### Step 4: Training the Model
Train the GNN model on your dataset.

```python
from torch_geometric.loader import DataLoader
from sklearn.model_selection import train_test_split

# Assume you have a target column 'activity'
X_train, X_test, y_train, y_test = train_test_split(graph_data, data['activity'], test_size=0.2, random_state=42)

# Create DataLoader
train_loader = DataLoader(list(zip(X_train, y_train)), batch_size=32, shuffle=True)
test_loader = DataLoader(list(zip(X_test, y_test)), batch_size=32, shuffle=False)

# Training loop
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
criterion = nn.BCELoss()

for epoch in range(100):  # Number of epochs
    model.train()
    for batch in train_loader:
        optimizer.zero_grad()
        data, target = batch
        output = model(data)
        loss = criterion(output, target.float())
        loss.backward()
        optimizer.step()

    print(f'Epoch {epoch+1}, Loss: {loss.item()}')
```

### Step 5: Evaluation
Evaluate the model on the test set.

```python
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for batch in test_loader:
        data, target = batch
        output = model(data)
        predicted = (output > 0.5).float()
        total += target.size(0)
        correct += (predicted == target).sum().item()

accuracy = correct / total
print(f'Accuracy: {accuracy * 100:.2f}%')
```

This example demonstrates how to prepare SMILES data, convert it to molecular graphs, define a GNN model, train it, and evaluate its performance. You can customize the model architecture and training process based on your specific needs[1](https://github.com/masashitsubaki/molecularGNN_smiles)[2](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2523-5)[3](https://www.blopig.com/blog/2022/02/how-to-turn-a-smiles-string-into-a-molecular-graph-for-pytorch-geometric/).

If you have any further questions or need additional details, feel free to ask!
